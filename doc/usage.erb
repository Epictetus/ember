%#--
%# Copyright protects this work.
%# See LICENSE file for details.
%#++

%|chapter "Usage"
  %|section "Command-line interface"
    When you run this command:

        <%= $program %> --help

    You will see this output:

    <pre><%= verbatim `ruby bin/#{$program} --help` %></pre>

  %|section "Ruby library interface"
    Begin by loading <%= $project %> into Ruby:

    <code>
    require 'rubygems'
    require '<%= $program %>'
    </code>

    Instantiate a template processor:

    <code>
    source   = "your eRuby template here"
    options  = { :unindent => true, :shorthand => true }

    template = Ember::Template.new(source, options)
    </code>

    Inspect the Ruby program that is used to evaluate the eRuby template:

    <code>
    puts template.program
    </code>

    View the result of evaluating the eRuby template:

    <code>
    puts template.render
    </code>

    See the [API documentation](<%= api_url %>) for details and examples.

  %|section "eRuby template directives", "Directives"
    eRuby templates are plain-text documents that contain special processing instructions known as **directives**.  Directives may be expressed using either **standard** or **shorthand** notation:

    | Notation  | Directive | Head | Operation | Body | Tail |
    | --------  | --------- | ---- | --------- | ---- | ---- |
    | Standard  | <%%XY%>   | <%%  | X         | Y    | %>   |
    | Shorthand | %XY       | %    | X         | Y    |      |

    In standard notation, the directive is composed of a head, <%= xref "Operations", "an operation" %>, a body, and a tail.  Furthermore, the directive may appear anywhere in the text.

    In shorthand notation, the directive is composed of a head, <%= xref "Operations", "an operation" %> and a body.  Furthermore, the directive may only appear in the text if it occupies an entire line.

    In any case, directives are atomic constructs; they may not be nested.

    %|section "Operations"
      The first character that follows the head of a directive is known as an **operation**.  Operations specify how the directive should be processed:

      | Operation                                              | Effect                                                                                                                                                                                                                                                                                                                                                                                                            | Example                                   |
      | ---------                                              | ------                                                                                                                                                                                                                                                                                                                                                                                                            | -------                                   |
      | <%= Ember::Template::OPERATION_COMMENT_LINE %>         | The entire directive is omitted from the output.                                                                                                                                                                                                                                                                                                                                                                  | <%= xref "Comment directives" %>          |
      | <%= Ember::Template::OPERATION_EVAL_EXPRESSION %>      | The body of the directive is evaluated as Ruby code, and the result of this evaluation is inserted into the output.                                                                                                                                                                                                                                                                                               | <%= xref "Vocal directives" %>            |
      | <%= Ember::Template::OPERATION_EVAL_TEMPLATE_STRING %> | The body of the directive is evaluated as an eRuby template, and the result of this evaluation is inserted into the output.                                                                                                                                                                                                                                                                                       | <%= xref "Dynamic template evaluation" %> |
      | <%= Ember::Template::OPERATION_EVAL_TEMPLATE_FILE %>   | The body of the directive is evaluated as Ruby code, and the result of this evaluation is assumed to be a string that specifies the path (either absolute or relative to the eRuby template file in which this directive is found) to a file containing an eRuby template.  This file is read and its contents are evaluated as an eRuby template, and the result of this evaluation is inserted into the output. | <%= xref "Template file inclusion" %>     |
      | <%= Ember::Template::OPERATION_INSERT_PLAIN_FILE %>    | The body of the directive is evaluated as Ruby code, and the result of this evaluation is assumed to be a string that specifies the path (either absolute or relative to the eRuby template file in which this directive is found) to a file.  This file is read and its contents are inserted into the output.                                                                                                   | <%= xref "Raw file inclusion" %>          |
      | &#124;                                                 | The body of the directive is treated as the beginning of a Ruby block.  The `do` keyword is automatically appended to the body of the directive if missing.                                                                                                                                                                                                                                                       | <%= xref "Block directives" %>            |
      | %                                                      | One "%" character is omitted from the head of the directive and the entire directive is inserted into the output.                                                                                                                                                                                                                                                                                                 | <%= xref "Escaped directives" %>          |
      | (none of the above)                                    | The body of the directive is evaluated as Ruby code, but the result of this evaluation *is not* inserted into the output.                                                                                                                                                                                                                                                                                         | <%= xref "Silent directives" %>           |

      <%
        standard_directive = lambda do |body|
          '<' + '%' + body + ' %' + '>'
        end

        shorthand_directive = lambda do |body|
          '%' + body
        end

        template_example = lambda do |input, options|
          input = input.strip.gsub(/^ {4}/, '') << "\n" # remove indentation
          template = Ember::Template.new(input, options)

          options_display =
            if options.empty?
              "This"
            else
              "With `#{options.inspect}`, this"
            end

          [
            "<pre>#{input}</pre>",

            "#{options_display} template compiles into:",
            "<code>#{template.program}</code>",

            "And renders as:",
            "<pre>#{template.render}</pre>",

          ].join("\n\n")
        end
      %>

      %|example "An empty template"
        Begin with an empty template:

        <%= template_example.call "", {} %>

      %|example "Comment directives"
        Add comment directives:

        <%=
          template_example.call %{
            #{standard_directive['# this is a comment']}
            #{shorthand_directive['# this is also a comment']}

            #{standard_directive["# this is a\n\n multi-line comment"]}
          }, :shorthand => true
        %>

      %|example "Escaped directives"
        Add escaped directives:

        <%=
          example = '% this is an escaped directive'

          template_example.call %{
            #{standard_directive[example]}
            #{shorthand_directive[example]}
          }, :shorthand => true
        %>

      %|example "Vocal directives"
        Add vocal directives, which produce output:

        <%=
          template_example.call %{
            #{standard_directive['= "hello"']}
            #{shorthand_directive['= "world"']}

          }, :shorthand => true
        %>

      %|example "Silent directives"
        Add silent directives, which do not produce output:

        <%=
          template_example.call %{
            #{standard_directive[' a = "hello"']}
            #{shorthand_directive[' b = "world"']}

            #{standard_directive['= a']}
            #{shorthand_directive['= b']}

          }, :shorthand => true
        %>

      %|example "Block directives"
        Add some Ruby blocks:

        <%=
          template_example.call %{
            #{shorthand_directive[' words = %w[hello world]']}

            #{standard_directive[' words.each do |w|']}
              #{standard_directive['= w']}
            #{standard_directive[' end']}

            #{shorthand_directive[' words.each do |w|']}
              #{shorthand_directive['= w']}
            #{shorthand_directive[' end']}

            #{shorthand_directive['|words.each |w|']}
              #{shorthand_directive['= w']}
            #{shorthand_directive[' end']}

          }, :shorthand => true
        %>

      %|example "Infer block endings"
        Omit <tt><%= standard_directive[' end'] %></tt> directives from the template:

        <%=
          template_example.call %{
            #{shorthand_directive[' words = %w[hello world]']}

            #{standard_directive[' words.each do |w|']}
              #{standard_directive['= w']}

            #{shorthand_directive[' words.each do |w|']}
              #{shorthand_directive['= w']}

            #{shorthand_directive['|words.each |w|']}
              #{shorthand_directive['= w']}

          }, :shorthand => true, :infer_end => true
        %>

      %|example "Raw file inclusion"
        When <tt>doc/example.txt</tt> contains:

        <pre><%< "example.txt" %></pre>

        And the eRuby template is:

        <%=
          example = '< "example.txt"'

          template_example.call %{
            #{standard_directive[example]}

            #{shorthand_directive[example]}

          }, :shorthand => true, :source_file => __FILE__
        %>

      %|example "Template file inclusion"
        When <tt>doc/example.erb</tt> contains:

        <code lang="rhtml"><%< "example.erb" %></code>

        And the eRuby template is:

        <%=
          example = '+ "example.erb"'

          template_example.call %{
            #{standard_directive[example]}

            #{shorthand_directive[example]}

          }, :shorthand => true, :source_file => __FILE__
        %>

      %|example "Dynamic template evaluation"
        <%=
          example = %{~ "#{shorthand_directive['= 2 + 2']}"}

          template_example.call %{
            #{standard_directive[example]}

            #{shorthand_directive[example]}

          }, :shorthand => true
        %>
