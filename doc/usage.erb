%#--
%# Copyright protects this work.
%# See LICENSE file for details.
%#++


%|chapter "Usage"


  %|section "Command-line interface"

    When you run this command:

        <%= $program %> --help

    You will see this output:

    %|text
      %= verbatim `ruby bin/#{$program} --help`


  %|section "Ruby library interface"

    Begin by loading <%= $project %> into Ruby:

    %|code
      require 'rubygems'
      require '<%= $program %>'

    Instantiate a template processor:

    %|code
      source   = "your eRuby template here"
      options  = { :unindent => true, :shorthand => true }
      template = Ember::Template.new(source, options)

    Inspect the Ruby program that is used to evaluate the eRuby template:

    %|code
      puts template.program

    View the result of evaluating the eRuby template:

    %|code
      puts template.render

    See the [API documentation](<%= api_url %>) for details and examples.


  %|section "eRuby template directives", "Directives"

    eRuby templates are plain-text documents that contain special processing instructions known as **directives**.  Directives may be expressed using either **standard** or **shorthand** notation:

    %|table
      %|thead
        %|tr
          %|th
            Notation
          %|th
            Directive
          %|th
            Head
          %|th
            Operation
          %|th
            Body
          %|th
            Tail
      %|tbody
        %|tr
          %|td
            Standard
          %|td
            <%%XY%>
          %|td
            <%%
          %|td
            X
          %|td
            Y
          %|td
            %%>
        %|tr
          %|td
            Shorthand
          %|td
            %%XY
          %|td
            %%
          %|td
            X
          %|td
            Y
          %|td

    In standard notation, the directive is composed of a head, <%= xref "Operations", "an operation" %>, a body, and a tail.  Furthermore, the directive may appear anywhere in the text.

    In shorthand notation, the directive is composed of a head, <%= xref "Operations", "an operation" %> and a body.  Furthermore, the directive may only appear in the text if it occupies an entire line.

    In any case, directives are atomic constructs; they cannot be nested.


    %|section "Operations"

      The first character that follows the head of a directive is known as an **operation**.  Operations specify how the directive should be processed:

      %|table
        %|thead
          %|tr
            %|th
              Operation
            %|th
              Effect
            %|th
              Example
        %|tbody
          %|tr
            %|td
              `<%= Ember::Template::OPERATION_COMMENT_LINE %>`
            %|td
              The entire directive is omitted from the output.
            %|td
              %= xref "Comment directives"
          %|tr
            %|td
              `<%= Ember::Template::OPERATION_EVAL_EXPRESSION %>`
            %|td
              The body of the directive is evaluated as Ruby code, and the result of this evaluation is inserted into the output.
            %|td
              %= xref "Vocal directives"
          %|tr
            %|td
              `<%= Ember::Template::OPERATION_EVAL_TEMPLATE_STRING %>`
            %|td
              The body of the directive is evaluated as an eRuby template, and the result of this evaluation is inserted into the output.
            %|td
              %= xref "Dynamic template evaluation"
          %|tr
            %|td
              `<%= Ember::Template::OPERATION_EVAL_TEMPLATE_FILE %>`
            %|td
              The body of the directive is evaluated as Ruby code, and the result of this evaluation is assumed to be a string that specifies the path (either absolute or relative to the eRuby template file in which this directive is found) to a file containing an eRuby template.  This file is read and its contents are evaluated as an eRuby template, and the result of this evaluation is inserted into the output.
            %|td
              %= xref "Template file inclusion"
          %|tr
            %|td
              `<%= Ember::Template::OPERATION_INSERT_PLAIN_FILE %>`
            %|td
              The body of the directive is evaluated as Ruby code, and the result of this evaluation is assumed to be a string that specifies the path (either absolute or relative to the eRuby template file in which this directive is found) to a file.  This file is read and its contents are inserted into the output.
            %|td
              %= xref "Raw file inclusion"
          %|tr
            %|td
              `<%= Ember::Template::OPERATION_BEGIN_LAMBDA %>`
            %|td
              The body of the directive is treated as the beginning of a Ruby block.  The `do` keyword is automatically appended to the body of the directive if missing.
            %|td
              %= xref "Block directives"
          %|tr
            %|td
              `%`
            %|td
              One "%" character is omitted from the head of the directive and the entire directive is inserted into the output.
            %|td
              %= xref "Escaped directives"
          %|tr
            %|td
              (none of the above)
            %|td
              The body of the directive is evaluated as Ruby code, but the result of this evaluation *is not* inserted into the output.
            %|td
              %= xref "Silent directives"


      <%
        standard_directive = lambda do |body|
          '<' + '%' + body + ' %' + '>'
        end

        shorthand_directive = lambda do |body|
          '%' + body
        end
      %>

      %|template_example = lambda do |input, options|
        % input = input.strip.gsub(/^ {4}/, '') << "\n" # remove indentation
        % template = Ember::Template.new(input, options)

        % text { input }

        <%=
          if options.empty?
            "The"
          else
            "With `#{options.inspect}` options, the"
          end
        %> above template compiles into:

        % code { template.program }

        And renders as:

        % text { template.render }


      %|example! "An empty template"

        Begin with an empty template:

        %= template_example.call "", {}


      %|example! "Comment directives"

        Add comment directives:

        <%=
          template_example.call %{
            #{standard_directive.call  '# this is a comment'}
            #{shorthand_directive.call '# this is also a comment'}

            #{standard_directive.call  "# this\nis\na\nmulti-line comment"}
          }, :shorthand => true
        %>


      %|example! "Escaped directives"

        Add escaped directives:

        <%=
          example = '% this is an escaped directive'

          template_example.call %{
            #{standard_directive.call example}
            #{shorthand_directive.call example}
          }, :shorthand => true
        %>


      %|example! "Vocal directives"

        Add vocal directives, which produce output:

        <%=
          template_example.call %{
            #{standard_directive.call   '= "hello"'}
            #{shorthand_directive.call  '= "world"'}

          }, :shorthand => true
        %>


      %|example! "Silent directives"

        Add silent directives, which do not produce output:

        <%=
          template_example.call %{
            #{standard_directive.call   ' a = "hello"'}
            #{shorthand_directive.call  ' b = "world"'}

            #{standard_directive.call   '= a'}
            #{shorthand_directive.call  '= b'}

          }, :shorthand => true
        %>


      %|example! "Block directives"

        Add some Ruby blocks:

        <%=
          template_example.call %{
            #{shorthand_directive.call    ' words = %w[hello world]'}

            #{standard_directive.call     ' words.each do |w|'}
              #{standard_directive.call   '= w'}
            #{standard_directive.call     ' end'}

            #{shorthand_directive.call    ' words.each do |w|'}
              #{shorthand_directive.call  '= w'}
            #{shorthand_directive.call    ' end'}

            #{shorthand_directive.call    '|words.each |w|'}
              #{shorthand_directive.call  '= w'}
            #{shorthand_directive.call    ' end'}

          }, :shorthand => true
        %>


      %|example! "Infer block endings"

        Omit <tt><%= standard_directive.call ' end' %></tt> directives from the template:

        <%=
          template_example.call %{
            #{shorthand_directive.call    ' words = %w[hello world]'}

            #{standard_directive.call     ' words.each do |w|'}
              #{standard_directive.call   '= w'}

            #{shorthand_directive.call    ' words.each do |w|'}
              #{shorthand_directive.call  '= w'}

            #{shorthand_directive.call    '|words.each |w|'}
              #{shorthand_directive.call  '= w'}

          }, :shorthand => true, :infer_end => true
        %>


      %|example! "Raw file inclusion"

        When <tt>doc/example.txt</tt> contains:

        %|text
          %< "example.txt"

        And the eRuby template is:

        <%=
          example = '< "example.txt"'

          template_example.call %{
            #{standard_directive.call example}

            #{shorthand_directive.call example}

          }, :shorthand => true, :source_file => __FILE__
        %>


      %|example! "Template file inclusion"

        When <tt>doc/example.erb</tt> contains:

        %|code :rhtml
          %< "example.erb"

        And the eRuby template is:

        <%=
          example = '+ "example.erb"'

          template_example.call %{
            #{standard_directive.call example}

            #{shorthand_directive.call example}

          }, :shorthand => true, :source_file => __FILE__
        %>


      %|example! "Dynamic template evaluation"

        <%=
          example = %{~ "#{shorthand_directive.call '= 2 + 2'}"}

          template_example.call %{
            #{standard_directive.call example}

            #{shorthand_directive.call example}

          }, :shorthand => true
        %>

